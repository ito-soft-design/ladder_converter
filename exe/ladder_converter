#!/usr/bin/env ruby

require "ladder_converter"
require 'optparse'

include LadderConverter

@options = {ignore_unknown:true}

opt = OptionParser.new do |opt|
  opt.banner = 'Usage: ladder_converter source_file target_file [options]'
  opt.on('--[no-]ignore-unknown', "Skip a code if it's an unknown mnemonic or device. If set no- quit converting immediately.") {|v| @options[:ignore_unknown] = v }
  opt.on('-f', '--force-converting', "Convert codes without querying to overwrite the target file.") {|v| @options[:force_converting] = v }
  opt.on('-l file', '--logging-file file', "Set a path to write a logging file.") {|v| @options[:logging_file] = v }
  opt.parse!(ARGV)
end

unless ARGV.size == 2
  puts opt.help
  exit -1
end

src_path = ARGV[0]
dst_path = ARGV[1]

unless File.exist? src_path
  STDERR.puts "Source file #{File.basename(src_path)} is not found!"
  exit -1
end

unless @options[:force_converting]
  while File.exist? dst_path
    print "Target file #{File.basename(dst_path)} is exist. Overwrite existing file (y/N) ? "
    case STDIN.gets.chomp
    when /^y$/i, /^yes$/i
      break
    when /^n$/i, /^no$/i
      STDERR.puts "Abort converting!"
      exit -1
    end
  end
end


converter = Mel2Kv.new @options.merge(src:src_path, dst:dst_path)
converter.save
